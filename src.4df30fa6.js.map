{"version":3,"sources":["src/hex.ts","src/key-manager.ts","src/index.ts"],"names":[],"mappings":";AAAA,aA0CA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxCA,QAAA,OAAA,QAAA,YAAA,EACA,IAAM,EAAiB,CACrgB,EAAO,GAIhB,IAHC,IAAA,EAAO,IAAI,WAAW,GACtB,EAAM,EAAK,OACX,EAAS,IAAI,MAAM,GAChB,EAAI,EAAG,EAAI,EAAK,IACvB,EAAO,GAAK,EAAe,EAAK,IAE3B,OAAA,EAAO,KAAK,IAQrB,SAAgB,EAAO,GACf,IAAA,EAAM,EAAI,OACZ,GAAA,EAAM,GAAM,EACR,MAAA,MAAM,4CAIT,IADC,IAAA,EAAO,IAAI,WAAW,EAAM,GACzB,EAAI,EAAG,EAAI,EAAM,EAAG,IAC3B,EAAK,GAAK,SAAS,EAAQ,EAAJ,GAAS,EAAQ,EAAJ,EAAQ,GAAI,IAE3C,OAAA,EAAK,OAzBd,QAAA,OAAA,EAeA,QAAA,OAAA;;AC6NA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3OA,IAAA,EAAA,WA0BE,SAAA,EAAY,QAAA,IAAA,IAAA,EAAoB,OAAO,QAvB/B,KAAA,UAAuB,CAC7B,KAAM,WACN,KAAM,UACN,KAAM,MAGA,KAAA,UAAuB,CAC7B,KAAM,SACN,KAAM,UACN,WAAY,KAGN,KAAA,cAA+B,CACrC,KAAM,UACN,OAAQ,KAGF,KAAA,YAAc,IAAI,YAClB,KAAA,YAAc,IAAI,YAAY,QAM/B,KAAA,UAAY,EA8MrB,OA3MS,EAAA,UAAA,MAAP,WACO,KAAA,aAAU,EACV,KAAA,aAAU,GAGV,EAAA,UAAA,WAAP,WAEI,YAAiB,IAAjB,KAAK,WACH,KAAK,QAAQ,aACb,KAAK,QAAQ,YAIZ,EAAA,UAAA,WAAP,WACS,QAAE,KAAK,SAGT,EAAA,UAAA,iBAAP,WACS,MAAA,CACL,QAAS,KAAK,QACd,QAAS,KAAK,UAIX,EAAA,UAAA,aAAP,WACS,OAAA,KAAK,UAAU,gBAAgB,IAAI,WAAW,MAGzC,EAAA,UAAA,eAAd,SAA6B,GAAmB,OAAA,EAAA,UAAA,EAAA,QAAO,WAiLzD,OAAA,EAAA,KAAA,SAAA,GAhLI,MAAA,CAAA,EAAO,KAAK,UAAU,OAAO,UAC3B,MACA,KAAK,YAAY,OAAO,GACxB,KAAK,UAAU,MACf,EACA,CAAC,YAAa,qBAIL,EAAA,UAAA,cAAb,SACE,EACA,EACA,GACC,OAAA,EAAA,UAAA,EAAA,QAAO,WAmKZ,IAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAlKwB,MAAA,CAAA,EAAM,KAAK,eAAe,IAkKlD,KAAA,EA9JmB,OAJT,EAAc,EAAA,OAIpB,EAAA,KAAe,CAAA,EAAM,KAAK,UAAU,OAAO,UACzC,CACE,KAAM,KAAK,UAAU,KACrB,KAAM,KAAK,UAAU,KACrB,WAAY,KAAK,UAAU,WAC3B,KAAM,GAER,EAGA,CAAE,KAAM,KAAK,cAAc,KAAM,OAAQ,KAAK,cAAc,SAC5D,EACA,CAAC,UAAW,eAkJlB,KAAA,EAAA,OA9JI,EAAK,QAAU,EAAA,OA8JnB,CAAA,SA9IQ,EAAA,UAAA,gBAAN,WAAyB,OAAA,EAAA,UAAA,EAAA,QAAO,WA8IlC,IAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA7ImB,OAAf,EAAA,KAAe,CAAA,EAAM,KAAK,UAAU,OAAO,YACzC,CACE,KAAM,KAAK,UAAU,KACrB,KAAM,KAAK,UAAU,KAErB,cAAe,KAAK,UAAU,KAG9B,eAAgB,IAAI,WAAW,CAAC,EAAG,EAAG,MARrB,EAalB,CAAA,UAAW,aAgIlB,KAAA,EAAA,OA7II,EAAK,QAAU,EAAA,OA6InB,CAAA,SA5HQ,EAAA,UAAA,gBAAN,WAAyB,OAAA,EAAA,UAAA,EAAA,QAAO,WA4HlC,IAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA3HQ,IAAC,KAAK,UAAY,KAAK,QAAQ,UAC3B,MAAA,IAAI,MAAM,sBAGQ,MAAA,CAAA,EAAM,KAAK,UAAU,OAAO,UACpD,OACK,KAAA,QAAQ,YAqHnB,KAAA,EAlHI,OALM,EAAoB,EAAA,OAK1B,CAAA,EAAO,IAAI,WAAW,UAGlB,EAAA,UAAA,gBAAN,SAAsB,GAA4B,OAAA,EAAA,UAAA,EAAA,QAAO,WA+G3D,IAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAtG6B,OARpB,KAAK,UACH,KAAA,QAAU,CAAE,eAAW,EAAW,gBAAY,IAGhD,KAAK,QAAQ,YACX,KAAA,QAAQ,eAAY,GAG3B,EAAA,KAAK,QAAoB,CAAA,EAAM,KAAK,UAAU,OAAO,UACnD,OACA,EACA,CACE,KAAM,KAAK,UAAU,KACrB,KAAM,KAAK,UAAU,OAEvB,EACA,CAAC,aA8FP,KAAA,EAAA,OAtGI,EAAa,UAAY,EAAA,OAsG7B,CAAA,SA1FQ,EAAA,UAAA,UAAN,WAAmB,OAAA,EAAA,UAAA,EAAA,QAAO,WA0F5B,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAzFQ,IAAC,KAAK,UAAY,KAAK,QAAQ,WAC3B,MAAA,IAAI,MAAM,uBAGd,IAAC,KAAK,QACF,MAAA,IAAI,MAAM,oBAIF,OADV,EAAK,KAAK,UAAU,gBAAgB,IAAI,WAAW,KACzC,CAAA,EAAM,KAAK,UAAU,OAAO,QAC1C,QACK,KAAA,QAAQ,WACb,KAAK,QAGL,CACE,KAAM,KAAK,cAAc,KAEzB,GAAE,KAuEV,KAAA,EA9DI,OAlBM,EAAU,EAAA,QAcV,EAAS,IAAI,WAAW,EAAG,WAAa,EAAQ,aAC/C,IAAI,EAAI,GACf,EAAO,IAAI,IAAI,WAAW,GAAU,EAAG,YAEvC,CAAA,EAAO,SAGH,EAAA,UAAA,UAAN,SAAgB,GAAsB,OAAA,EAAA,UAAA,EAAA,QAAO,WA2D/C,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAvDQ,GAHE,EAAK,EAAO,MAAM,EAAG,IACrB,EAAU,EAAO,MAAM,GAAI,EAAO,YAEpC,EAAO,WAAa,GAChB,MAAA,IAAI,MAAM,wBAGd,IAAC,KAAK,QACF,MAAA,IAAI,MAAM,oBAWQ,OARrB,KAAK,UACH,KAAA,QAAU,CAAE,eAAW,EAAW,gBAAY,IAGhD,KAAK,QAAQ,aACX,KAAA,QAAQ,gBAAa,GAG5B,EAAA,KAAK,QAAqB,CAAA,EAAM,KAAK,UAAU,OAAO,UAAtB,QAI9B,EAEK,KAAA,QAEL,CACE,KAAM,UAEN,GAAE,GAGJ,CAAE,KAAM,KAAK,UAAU,KAAM,KAAM,KAAK,UAAU,OAdpB,EAkB7B,CAAA,aAqBP,KAAA,EAAA,OAvCI,EAAa,WAAa,EAAA,OAuC9B,CAAA,SAjBQ,EAAA,UAAA,QAAN,SAAc,GAAgB,OAAA,EAAA,UAAA,EAAA,QAAO,WAiBvC,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAhBoB,MAAA,CAAA,EAAM,KAAK,UAAU,OAAO,QAC1C,KAAK,UAAU,KACf,KAAK,QAAQ,UACb,KAAK,YAAY,OAAO,KAa9B,KAAA,EAVI,MAAA,CAAA,EANgB,EAAA,cASZ,EAAA,UAAA,QAAN,SAAc,GAAqB,OAAA,EAAA,UAAA,EAAA,QAAO,WAO5C,IAAA,EAAA,KAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EANW,MAAA,CAAA,EAAM,KAAK,UAAU,OACzB,QAAQ,KAAK,UAAU,KAAM,KAAK,QAAQ,WAAY,GACtD,KAAK,SAAC,GAAc,OAAA,EAAK,YAAY,OAAO,MAInD,KAAA,EANI,MAAA,CAAA,EAAO,EAAA,cAIX,EAzOA,GA2OA,QAAA,QAAe;;ACtBd,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjPD,IAAA,EAAA,QAAA,SACA,EAAA,EAAA,QAAA,kBAEA,SAAS,IAAT,IAAA,EAAA,KACM,GAAC,OAAO,QAAW,OAAO,OAAO,OAAjC,CAOE,IAAA,EAAgB,SAAS,eAAe,kBAExC,EAAkC,SAAS,eAAe,YAC1D,EACJ,SAAS,eAAe,oBAEpB,EAA+B,SAAS,eAAe,QAEvD,EACJ,SAAS,eAAe,cAEpB,EACJ,SAAS,eAAe,eAGpB,EAA8B,SAAS,eAAe,SACtD,EACJ,SAAS,eAAe,oBAEpB,EACJ,SAAS,eAAe,kBAEpB,EACJ,SAAS,eAAe,kBA0BpB,EAAsB,CAAE,MAAO,KAAM,UAAW,MAGhD,EAAa,IAAI,EAAA,QAAW,OAAO,QACrC,EAAO,EAAW,eAyBtB,EAAG,EAAY,QAAS,SAAC,GAEO,KAA5B,EAAW,MAAM,QACjB,eAAe,KAAK,EAAW,QAE/B,EAAO,IAAI,YAAW,EAAA,EAAA,QAAO,EAAW,QACxC,EAAW,iBAEX,EAAW,qDAIf,EAAG,EAAgB,QAAS,SAAC,GACvB,EAAe,OAAS,EAAgB,MAC1C,EAAiB,gBAAgB,YAEjC,EAAiB,aAAa,WAAY,UAI9C,EAAG,EAAiB,QAAS,SAAC,GACxB,EAAe,OAAS,EAAgB,MAC1C,EAAiB,gBAAgB,YAEjC,EAAiB,aAAa,WAAY,UAI9C,IAWA,EAAG,EAAU,QAAS,WACpB,MAGF,EAAG,EAAoB,QAAS,WAAA,OAAA,EAAA,OAAA,OAAA,EAAA,WA6GjC,IAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA1GO,KAFE,EAdC,WACH,KAAA,EAAc,MAAM,OAAS,GAK1B,OAAA,EAAc,MAJnB,EAAW,mDAYI,IAEF,MAAA,CAAA,GA0GlB,EAAA,MAAA,EAAA,KAAA,EAvGK,OAuGL,EAAA,KAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IAvGK,CAAA,EAAM,EAAW,cAAc,mBAAoB,EAAU,IAuGlE,KAAA,EAAA,OAvGK,EAAA,OAEA,EAAW,sBAEX,EAAmB,gBAAgB,YAmGxC,CAAA,EAAA,GAAA,KAAA,EAAA,OAjGK,EAAW,UAiGhB,EAAA,OAjGgC,SAiGhC,CAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,UA7FC,EAAG,EAAoB,QAAS,WAAA,OAAA,EAAA,OAAA,OAAA,EAAA,WA6FjC,IAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA5FG,EAAW,yBA4Fd,EAAA,MAAA,EAAA,KAAA,EAzFK,OAyFL,EAAA,KAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IAzFK,CAAA,EAAM,EAAW,mBAyFtB,KAAA,EAAA,OAzFK,EAAA,OAEA,EAAW,qBACX,EAAiB,gBAAgB,YAsFtC,CAAA,EAAA,GAAA,KAAA,EAAA,OAAA,EAAA,EAAA,OApFK,QAAQ,MAAM,WAAY,EAAI,SAoFnC,CAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,UAhFC,EAAG,EAAkB,QAAS,SAAO,GAAE,OAAA,EAAA,OAAA,OAAA,EAAA,WAgFxC,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA/EO,OAAC,EAAW,aAKX,EAAW,cAOhB,EAAO,OAAQ,IAAI,MAAO,WAC1B,EAAA,EAAmB,CAAA,EAAM,EAAW,QAAQ,EAAO,UAPjD,EACE,wFAEF,CAAA,KARA,EAAW,0DACX,CAAA,IA6EL,KAAA,EAlEG,EAAO,UAAY,EAAA,OAEnB,QAAQ,IAAI,WAAY,GAgE3B,EAAA,MAAA,EAAA,KAAA,EA7DwB,OA6DxB,EAAA,KAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IA7DwB,CAAA,EAAM,EAAW,aA6DzC,KAAA,EA5DuB,OADZ,EAAa,EAAA,OACD,CAAA,EAAM,EAAW,mBA4DxC,KAAA,EAAA,OA5DW,EAAY,EAAA,OAElB,EAAe,OAAQ,EAAA,EAAA,QAAO,GAC9B,EAAgB,OAAQ,EAAA,EAAA,QAAO,GAE/B,EAAiB,gBAAgB,YAEjC,EAAW,aAqDhB,CAAA,EAAA,GAAA,KAAA,EAAA,OAnDK,EAAW,gBAmDhB,EAAA,OAnDsC,SAmDtC,CAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,UA/CC,EAAG,EAAkB,QAAS,WAAA,OAAA,EAAA,OAAA,OAAA,EAAA,WA+C/B,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA9CO,IAAC,EAAW,aAEd,OADA,EAAW,+BACX,CAAA,GAGI,GAAY,EAAA,EAAA,QAAO,EAAe,OAClC,GAAa,EAAA,EAAA,QAAO,EAAgB,OAwC7C,EAAA,MAAA,EAAA,KAAA,EArCK,OAqCL,EAAA,KAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IArCK,CAAA,EAAM,EAAW,gBAAgB,IAqCtC,KAAA,EApCK,OADA,EAAA,OACA,CAAA,EAAM,EAAW,UAAU,IAoChC,KAAA,EAlCS,OAFJ,EAAA,OAEI,EAAW,aACT,EAAO,WAAa,EAAO,MACL,CAAA,EAAM,EAAW,QAAQ,EAAO,YADtD,CAAA,EAAA,GADF,CAAA,EAAA,GAkCT,KAAA,EAhCe,EAAkB,EAAA,OAExB,QAAQ,IAAI,iBAAkB,GAC9B,QAAQ,IACN,wBACA,IAAoB,EAAO,OAGxB,EAEM,IAAoB,EAAO,OACpC,EAAW,qDAFX,EAAW,mCAuBtB,EAAA,MAAA,EAAA,KAAA,EAAA,OAjBO,EAAW,aAiBlB,CAAA,EAAA,GAAA,KAAA,EAfO,EAAW,gCAelB,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,CAAA,EAAA,GAAA,KAAA,EAAA,OAAA,EAAA,EAAA,OAZK,QAAQ,IAAI,GACZ,EAAW,WAAa,EAAI,SAAW,EAAI,OAWhD,CAAA,EAAA,GAAA,KAAA,EAAA,MAAA,CAAA,UAPC,QAAQ,aArON,QAAQ,MACN,oFA+BK,SAAA,EAAY,EAAS,GAC5B,EAAc,YAAc,EACxB,IACF,QAAQ,IAAI,GACZ,QAAQ,IAAI,IAIP,SAAA,EAAG,EAAI,EAAO,GACrB,EAAG,iBAAiB,EAAO,SAAC,GAC1B,EAAG,iBACH,EAAY,aAAc,MAE1B,MAgBK,SAAA,EAAW,GAClB,EAAY,EAAS,EAAW,oBAGzB,SAAA,IACP,EAAO,EAAW,eAElB,EAAO,MAAQ,KACf,EAAO,UAAY,KAEnB,EAAc,MAAQ,GACtB,EAAW,OAAQ,EAAA,EAAA,QAAO,GAE1B,EAAe,MAAQ,GACvB,EAAgB,MAAQ,GAExB,EAAmB,aAAa,WAAY,QAC5C,EAAiB,aAAa,WAAY,QAC1C,EAAiB,aAAa,WAAY,QAE1C,EAAW,WAuJf,IACE,IACA,MAAO,GACP,QAAQ,MAAM","file":"src.4df30fa6.js","sourceRoot":"..","sourcesContent":["// Lookup table\n\n// prettier-ignore\nconst hexLookupTable = [\n  '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f',\n  '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f',\n  '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f',\n  '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f',\n  '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f',\n  '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f',\n  '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f',\n  '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f',\n  '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f',\n  '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f',\n  'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af',\n  'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf',\n  'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf',\n  'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df',\n  'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef',\n  'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'\n]\n\n/**\n * Encode an ArrayBuffer to hex in a string.\n * @param ab Data to encode to hex\n * @returns Hex-encoded string\n */\nexport function Encode(ab: ArrayBuffer): string {\n  const view = new Uint8Array(ab);\n  const len = view.length;\n  const result = new Array(len);\n  for (let i = 0; i < len; i++) {\n    result[i] = hexLookupTable[view[i]];\n  }\n  return result.join(\"\");\n}\n\n/**\n * Decode a string from hex.\n * @param str Hex-encoded string\n * @returns Data decoded from the hex string\n */\nexport function Decode(str: string): ArrayBuffer {\n  const len = str.length;\n  if (len % 2 !== 0) {\n    throw Error(\"Length of string must be a multiple of 2\");\n  }\n\n  const view = new Uint8Array(len / 2);\n  for (let i = 0; i < len / 2; i++) {\n    view[i] = parseInt(str[i * 2] + str[i * 2 + 1], 16);\n  }\n  return view.buffer;\n}\n","interface Keypair {\n  publicKey: CryptoKey;\n  privateKey: CryptoKey;\n}\n\n// interface ExportedKeyPair {\n//   publicKey: Uint8Array;\n//   privateKey: Uint8Array;\n//   iv: Uint8Array;\n// }\n\ninterface KeyParams {\n  name: \"RSA-OAEP\";\n  hash: \"SHA-512\" | \"SHA-256\";\n  size: 1024 | 2048 | 4096;\n}\n\ninterface UserKeyParams {\n  name: \"AES-GCM\";\n  length: 256;\n}\n\ninterface KdfParams {\n  name: \"PBKDF2\";\n  iterations: number;\n  hash: \"SHA-512\";\n}\n\nclass KeyManager {\n  // window.crypto.subtle API injected:\n  private cryptoAPI: Crypto;\n  private keyParams: KeyParams = {\n    name: \"RSA-OAEP\",\n    hash: \"SHA-512\",\n    size: 4096\n  };\n\n  private kdfParams: KdfParams = {\n    name: \"PBKDF2\",\n    hash: \"SHA-512\",\n    iterations: 10000\n  };\n\n  private userKeyParams: UserKeyParams = {\n    name: \"AES-GCM\",\n    length: 256\n  };\n\n  private textEncoder = new TextEncoder();\n  private textDecoder = new TextDecoder(\"utf8\");\n\n  private keypair?: Keypair;\n  private userKey?: CryptoKey;\n\n  constructor(cryptoAPI: Crypto = window.crypto) {\n    this.cryptoAPI = cryptoAPI;\n  }\n\n  public clear(): void {\n    this.keypair = undefined;\n    this.userKey = undefined;\n  }\n\n  public hasKeyPair(): boolean {\n    return (\n      this.keypair !== undefined &&\n      !!this.keypair.publicKey &&\n      !!this.keypair.privateKey\n    );\n  }\n\n  public hasUserKey(): boolean {\n    return !!this.userKey;\n  }\n\n  public getInternalState() {\n    return {\n      keypair: this.keypair,\n      userKey: this.userKey\n    };\n  }\n\n  public generateSalt(): Uint8Array {\n    return this.cryptoAPI.getRandomValues(new Uint8Array(16));\n  }\n\n  private async importPassword(password: string): Promise<CryptoKey> {\n    return this.cryptoAPI.subtle.importKey(\n      \"raw\",\n      this.textEncoder.encode(password),\n      this.kdfParams.name,\n      false,\n      [\"deriveKey\", \"deriveBits\"]\n    );\n  }\n\n  public async deriveUserKey(\n    identity: string,\n    password: string,\n    salt: Uint8Array\n  ): Promise<void> {\n    const passwordKey = await this.importPassword(password);\n\n    // TODO: derive salt from password & identity\n\n    this.userKey = await this.cryptoAPI.subtle.deriveKey(\n      {\n        name: this.kdfParams.name,\n        hash: this.kdfParams.hash,\n        iterations: this.kdfParams.iterations,\n        salt: salt\n      },\n      passwordKey,\n      // AES-KW doesn't seem to work:\n      // { name: \"AES-KW\", length: 256 },\n      { name: this.userKeyParams.name, length: this.userKeyParams.length },\n      false,\n      [\"wrapKey\", \"unwrapKey\"]\n    );\n  }\n\n  async generateKeyPair(): Promise<void> {\n    this.keypair = await this.cryptoAPI.subtle.generateKey(\n      {\n        name: this.keyParams.name,\n        hash: this.keyParams.hash,\n        // Consider using a 4096-bit key for systems that require long-term security\n        modulusLength: this.keyParams.size,\n        // This is the standard exponent of 65537:\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams#properties\n        publicExponent: new Uint8Array([1, 0, 1])\n      },\n      // This keypair needs to be exportable\n      true,\n      // And we use it for encryption and decryption:\n      [\"encrypt\", \"decrypt\"]\n    );\n  }\n\n  async exportPublicKey(): Promise<ArrayBuffer> {\n    if (!this.keypair || !this.keypair.publicKey) {\n      throw new Error(\"Missing public key\");\n    }\n\n    const exportedPublicKey = await this.cryptoAPI.subtle.exportKey(\n      \"spki\", // spki is for public keys\n      this.keypair.publicKey\n    );\n\n    return new Uint8Array(exportedPublicKey);\n  }\n\n  async importPublicKey(rawPublicKey: ArrayBuffer): Promise<void> {\n    if (!this.keypair) {\n      this.keypair = { publicKey: undefined, privateKey: undefined };\n    }\n\n    if (!this.keypair.publicKey) {\n      this.keypair.publicKey = undefined;\n    }\n\n    this.keypair.publicKey = await this.cryptoAPI.subtle.importKey(\n      \"spki\",\n      rawPublicKey,\n      {\n        name: this.keyParams.name,\n        hash: this.keyParams.hash\n      },\n      true,\n      [\"encrypt\"]\n    );\n  }\n\n  async exportKey(): Promise<ArrayBuffer> {\n    if (!this.keypair || !this.keypair.privateKey) {\n      throw new Error(\"Missing private key\");\n    }\n\n    if (!this.userKey) {\n      throw new Error(\"Missing user key\");\n    }\n\n    const iv = this.cryptoAPI.getRandomValues(new Uint8Array(16));\n    const wrapped = await this.cryptoAPI.subtle.wrapKey(\n      \"pkcs8\", // pkcs8 is for private keys\n      this.keypair.privateKey,\n      this.userKey,\n      // AES-KW doesn't seem to work:\n      // { name: \"AES-KW\" }\n      {\n        name: this.userKeyParams.name,\n        // @ts-ignore typescript is wrong with it's types\n        iv\n      }\n    );\n\n    // Pack the IV and Wrapped PrivateKey together:\n    const result = new Uint8Array(iv.byteLength + wrapped.byteLength);\n    result.set(iv, 0);\n    result.set(new Uint8Array(wrapped), iv.byteLength);\n\n    return result;\n  }\n\n  async importKey(rawKey: ArrayBuffer): Promise<void> {\n    const iv = rawKey.slice(0, 16);\n    const wrapped = rawKey.slice(16, rawKey.byteLength);\n\n    if (rawKey.byteLength < 16) {\n      throw new Error(\"Missing IV in rawKey\");\n    }\n\n    if (!this.userKey) {\n      throw new Error(\"Missing user key\");\n    }\n\n    if (!this.keypair) {\n      this.keypair = { publicKey: undefined, privateKey: undefined };\n    }\n\n    if (!this.keypair.privateKey) {\n      this.keypair.privateKey = undefined;\n    }\n\n    this.keypair.privateKey = await this.cryptoAPI.subtle.unwrapKey(\n      // import format\n      \"pkcs8\",\n      // ArrayBuffer representing key to unwrap\n      wrapped,\n      // CryptoKey representing key encryption key\n      this.userKey,\n      // algorithm identifier for key encryption key\n      {\n        name: \"AES-GCM\",\n        // @ts-ignore\n        iv\n      },\n      // algorithm identifier for key to unwrap\n      { name: this.keyParams.name, hash: this.keyParams.hash },\n      // extractability of key to unwrap\n      true,\n      // key usages for key to unwrap\n      [\"decrypt\"]\n    );\n  }\n\n  async encrypt(input: string): Promise<ArrayBuffer> {\n    const crypted = await this.cryptoAPI.subtle.encrypt(\n      this.keyParams.name,\n      this.keypair.publicKey,\n      this.textEncoder.encode(input)\n    );\n\n    return crypted;\n  }\n\n  async decrypt(input: ArrayBuffer): Promise<string> {\n    return await this.cryptoAPI.subtle\n      .decrypt(this.keyParams.name, this.keypair.privateKey, input)\n      .then((decrypted) => this.textDecoder.decode(decrypted));\n  }\n}\n\nexport default KeyManager;\n","import { Encode, Decode } from \"./hex\";\nimport KeyManager from \"./key-manager\";\n\nfunction bootstrap() {\n  if (!window.crypto || !window.crypto.subtle) {\n    console.error(\n      \"Your browser does not support the Web Cryptography API! This page will not work.\"\n    );\n    return;\n  }\n\n  const messageOutput = document.getElementById(\"message-output\");\n\n  const passwordInput = <HTMLInputElement>document.getElementById(\"password\");\n  const generateUserkeyBtn = <HTMLButtonElement>(\n    document.getElementById(\"generate-userkey\")\n  );\n  const saltOutput = <HTMLInputElement>document.getElementById(\"salt\");\n\n  const publicKeyField = <HTMLTextAreaElement>(\n    document.getElementById(\"public-key\")\n  );\n  const privateKeyField = <HTMLTextAreaElement>(\n    document.getElementById(\"private-key\")\n  );\n\n  const resetBtn = <HTMLButtonElement>document.getElementById(\"reset\");\n  const generateKeyPairBtn = <HTMLButtonElement>(\n    document.getElementById(\"generate-keypair\")\n  );\n  const exportKeyPairBtn = <HTMLButtonElement>(\n    document.getElementById(\"export-keypair\")\n  );\n  const importKeyPairBtn = <HTMLButtonElement>(\n    document.getElementById(\"import-keypair\")\n  );\n\n  function showMessage(message, state) {\n    messageOutput.textContent = message;\n    if (state) {\n      console.log(message);\n      console.log(state);\n    }\n  }\n\n  function on(el, event, callback) {\n    el.addEventListener(event, (ev) => {\n      ev.preventDefault();\n      showMessage(\"Working...\", null);\n\n      callback();\n    });\n  }\n\n  // Value for checking that everything worked okay:\n  interface CheckSecret {\n    value: string;\n    encrypted: ArrayBuffer;\n  }\n\n  const secret: CheckSecret = { value: null, encrypted: null };\n\n  // Create a new KeyManager Instance:\n  const keyManager = new KeyManager(window.crypto);\n  let salt = keyManager.generateSalt();\n\n  function setMessage(message) {\n    showMessage(message, keyManager.getInternalState());\n  }\n\n  function reset() {\n    salt = keyManager.generateSalt();\n\n    secret.value = null;\n    secret.encrypted = null;\n\n    passwordInput.value = \"\";\n    saltOutput.value = Encode(salt);\n\n    publicKeyField.value = \"\";\n    privateKeyField.value = \"\";\n\n    generateKeyPairBtn.setAttribute(\"disabled\", \"true\");\n    exportKeyPairBtn.setAttribute(\"disabled\", \"true\");\n    importKeyPairBtn.setAttribute(\"disabled\", \"true\");\n\n    setMessage(\"Ready!\");\n  }\n\n  on(saltOutput, \"input\", (ev) => {\n    if (\n      saltOutput.value.length === 32 &&\n      /[a-f0-9]{32}/.test(saltOutput.value)\n    ) {\n      salt = new Uint8Array(Decode(saltOutput.value));\n      setMessage(\"Loaded salt!\");\n    } else {\n      setMessage(\"Invalid salt: must be 32 hexadecimal characters\");\n    }\n  });\n\n  on(publicKeyField, \"input\", (ev) => {\n    if (publicKeyField.value && privateKeyField.value) {\n      importKeyPairBtn.removeAttribute(\"disabled\");\n    } else {\n      importKeyPairBtn.setAttribute(\"disabled\", \"true\");\n    }\n  });\n\n  on(privateKeyField, \"input\", (ev) => {\n    if (publicKeyField.value && privateKeyField.value) {\n      importKeyPairBtn.removeAttribute(\"disabled\");\n    } else {\n      importKeyPairBtn.setAttribute(\"disabled\", \"true\");\n    }\n  });\n\n  reset();\n\n  function readPassword() {\n    if (passwordInput.value.length < 8) {\n      setMessage(\"Password must be greater than 8 characters long\");\n      return;\n    }\n\n    return passwordInput.value;\n  }\n\n  on(resetBtn, \"click\", () => {\n    reset();\n  });\n\n  on(generateUserkeyBtn, \"click\", async () => {\n    const password = readPassword();\n\n    if (!password) return;\n\n    try {\n      await keyManager.deriveUserKey(\"test@example.org\", password, salt);\n\n      setMessage(\"Generated user key\");\n\n      generateKeyPairBtn.removeAttribute(\"disabled\");\n    } catch (err) {\n      setMessage(\"Error: \" + err.message);\n    }\n  });\n\n  on(generateKeyPairBtn, \"click\", async () => {\n    setMessage(\"Generating keypair...\");\n\n    try {\n      await keyManager.generateKeyPair();\n\n      setMessage(\"Generated keypair\");\n      exportKeyPairBtn.removeAttribute(\"disabled\");\n    } catch (err) {\n      console.error(\"Generate\", err.message);\n    }\n  });\n\n  on(exportKeyPairBtn, \"click\", async (ev) => {\n    if (!keyManager.hasKeyPair()) {\n      setMessage(\"Missing keypair for session, click 'Generate Keypair'.\");\n      return;\n    }\n\n    if (!keyManager.hasUserKey()) {\n      setMessage(\n        \"Missing userKey for session, enter a password above, and click 'Generate User Keys'.\"\n      );\n      return;\n    }\n\n    secret.value = new Date().toString();\n    secret.encrypted = await keyManager.encrypt(secret.value);\n\n    console.log(\"Secret: \", secret);\n\n    try {\n      const privateKey = await keyManager.exportKey();\n      const publicKey = await keyManager.exportPublicKey();\n\n      publicKeyField.value = Encode(publicKey);\n      privateKeyField.value = Encode(privateKey);\n\n      importKeyPairBtn.removeAttribute(\"disabled\");\n\n      setMessage(\"Exported!\");\n    } catch (err) {\n      setMessage(\"Export Error:\" + err.message);\n    }\n  });\n\n  on(importKeyPairBtn, \"click\", async () => {\n    if (!keyManager.hasUserKey()) {\n      setMessage(\"Missing userKey for session\");\n      return;\n    }\n\n    const publicKey = Decode(publicKeyField.value);\n    const privateKey = Decode(privateKeyField.value);\n\n    try {\n      await keyManager.importPublicKey(publicKey);\n      await keyManager.importKey(privateKey);\n\n      if (keyManager.hasKeyPair()) {\n        if (secret.encrypted && secret.value) {\n          const decryptedSecret = await keyManager.decrypt(secret.encrypted);\n\n          console.log(\"Secret Value: \", decryptedSecret);\n          console.log(\n            \"Secret Value Matches:\",\n            decryptedSecret === secret.value\n          );\n\n          if (!decryptedSecret) {\n            setMessage(\"Error: Could not decrypt secret\");\n          } else if (decryptedSecret !== secret.value) {\n            setMessage(\"Error: secrets do not match, something went wrong\");\n          }\n        }\n\n        setMessage(\"Imported!\");\n      } else {\n        setMessage(\"Error: Could not import keys\");\n      }\n    } catch (err) {\n      console.log(err);\n      setMessage(\"Error: \" + (err.message || err.name));\n    }\n  });\n\n  console.clear();\n}\n\ntry {\n  bootstrap();\n} catch (err) {\n  console.error(err);\n}\n"]}